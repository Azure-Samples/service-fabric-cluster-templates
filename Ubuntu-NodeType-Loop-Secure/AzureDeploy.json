{
    "$schema": "https://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
    "contentVersion": "1.0.0.0",
    "parameters": {
        "clusterLocation": {
            "type": "string",
            "metadata": {
                "description": "Location of the Cluster"
            }
        },
        "clusterName": {
            "type": "string",
            "metadata": {
                "description": "Name of your cluster - Between 3 and 23 characters. Letters and numbers only"
            }
        },
        "vnetName": {
            "type": "string",
            "metadata": {
              "description": "Name of Existing Vnet."
            }
          },
        "subnetNames": {
        "type": "array",
        "defaultValue": ["sf-subnet","sf-subnet","sf-subnet"],
        "metadata": {
                "description": "Name of Existing Subnet"
            }
        },
        "vnetResourceGroup": {
            "type": "string",
            "metadata": {
              "description": "Resource Group of existing Vnet"
            }
          },
        "clientCertificateStoreValue": {
            "type": "string",
            "metadata": {
              "description": "Client Certificate Thumbprint"
            }
        },
        "certificateStoreValue": {
            "type": "string",
            "allowedValues": [
                "My"
            ],
            "defaultValue": "My",
            "metadata": {
                "description": "The store name where the cert will be deployed in the virtual machine"
            }
        },
        "certificateThumbprint": {
            "type": "string",
            "metadata": {
                "description": "Certificate Thumbprint"
            }
        },
        "adminUserName": {
            "type": "string",
            "metadata": {
                "description": "Remote desktop user Id"
            }
        },
        "adminPassword": {
            "type": "securestring",
            "metadata": {
                "description": "user password. Must be a strong password"
            }
        },    
        "vmImagePublisher": {
            "type": "string",
            "defaultValue": "Canonical",
            "metadata": {
                "description": "VM image Publisher"
            }
        },
        "vmImageOffer": {
            "type": "string",
            "defaultValue": "UbuntuServer",
            "metadata": {
                "description": "VM image offer"
            }
        },
        "vmImageSku": {
            "type": "string",
            "defaultValue": "16.04-LTS",
            "metadata": {
                "description": "VM image SKU"
            }
        },
        "vmImageVersion": {
            "type": "string",
            "defaultValue": "latest",
            "metadata": {
                "description": "VM image version"
            }
        },
        "sourceVaultValue": {
            "type": "string",
            "metadata": {
                "description": "Resource Id of the key vault, is should be in the format of /subscriptions/<Sub ID>/resourceGroups/<Resource group name>/providers/Microsoft.KeyVault/vaults/<vault name>"
            }
        },
        "certificateUrlValue": {
            "type": "string",
            "metadata": {
                "description": "Refers to the location URL in your key vault where the certificate was uploaded, it is should be in the format of https://<name of the vault>.vault.azure.net:443/secrets/<exact location>"
            }
        },
        "storageAccountKind": {
            "type": "string",
            "defaultValue": "StorageV2",
            "allowedValues": [
                "StorageV2",
                "Storage",
                "BlobStorage"
            ],
            "metadata": {
                "description": "Storage Account kind"
            }
        },
        "storageAccountType": {
            "type": "string",
            "allowedValues": [
                "Standard_LRS",
                "Standard_GRS"
            ],
            "defaultValue": "Standard_LRS",
            "metadata": {
                "description": "Replication option for the VM image storage account"
            }
        },
        "nt0InstanceCount": {
            "type": "int",
            "defaultValue": 3,
            "metadata": {
                "description": "Instance count for node type"
            }
        },
        "vmNodeTypeSize": {
            "type": "array",
            "defaultValue": ["Standard_D2_v2","Standard_D2_v2"]
        },
        
        "clusterProtectionLevel": {
            "type": "string",
            "allowedValues": [
                "None",
                "Sign",
                "EncryptAndSign"
            ],
            "defaultValue": "EncryptAndSign",
            "metadata": {
                "description": "Protection level.Three values are allowed - EncryptAndSign, Sign, None. It is best to keep the default of EncryptAndSign, unless you have a need not to"
            }
        },
        "slbNSGName": {
            "type": "string",
            "defaultValue": "StdLbNsg01"
        },
        "loopCount":{
            "type":"int",
            "defaultValue": 2
        },
        "applicationDiagnosticsStorageAccountName_p": {
            "type": "string",
            "defaultValue": "sfelkdiag1",
            "metadata": {
                "description": "Storage account for diagnostic Logs"
            }
        },
        "supportLogStorageAccountName_p": {
            "type": "string",
            "defaultValue": "slelklog1",
            "metadata": {
                "description": "Storage account for other Logs"
            }
        }
    },
    "variables":{
        "publicIPApiVersion": "2017-08-01",
        "dnsName": "[concat(parameters('clusterName'))]",
        "computeLocation": "[parameters('clusterLocation')]",
        "lbApiVersion": "2017-08-01",
        "storageApiVersion": "2017-10-01",
        "vmNodeType0Name": "[toLower(concat('nt-', variables('vmName')))]",
        "vmName": "sfvm",
        "nt0fabricTcpGatewayPort": "19000",
        "nt0fabricHttpGatewayPort": "19080",
        "nt0applicationStartPort": "20000",
        "nt0applicationEndPort": "30000",
        "nt0ephemeralStartPort": "49152",
        "nt0ephemeralEndPort": "65534",
        "vmssApiVersion": "2017-03-30",
        "sfrpApiVersion": "2018-02-01",
        "overProvision": "false",
        "supportLogStorageAccountName": "[parameters('supportLogStorageAccountName_p')]",
        "applicationDiagnosticsStorageAccountName": "[parameters('applicationDiagnosticsStorageAccountName_p')]",
        "nicName": "NIC",
        "ntProperties": [{}, {"colour":"blue", "segment":"gold"}],
        "logEventHubSink": "",
        "copy":[
            {
                "name" :"publicIPAddress",
                "count":"[parameters('loopCount')]",
                "input":{
                    "publicIPAddress": {
                     "id": "[resourceId('Microsoft.Network/publicIPAddresses',concat(parameters('clusterName'),copyIndex('publicIPAddress',0)))]"
                    }
                }
               
            },
            {
                "name": "subnetRef",
                "count": "[parameters('loopCount')]",
                "input": {
                    "subnet": {
                        "id": "[resourceId(parameters('vnetResourceGroup'),'Microsoft.Network/virtualNetworks/subnets', parameters('vnetName'), parameters('subnetNames')[copyIndex('subnetRef',0)])]"
                    }
                }
            }
        ]
       
    },
    "resources": [
        {
            "apiVersion": "[variables('storageApiVersion')]",
            "type": "Microsoft.Storage/storageAccounts",
            "name": "[variables('supportLogStorageAccountName')]",
            "location": "[variables('computeLocation')]",
            "dependsOn": [],
            "properties": {},
             "kind": "[parameters('storageAccountKind')]",
            "sku": {
                "name": "[parameters('storageAccountType')]"
            },
            "tags": {
                "resourceType": "Service Fabric",
                "clusterName": "[parameters('clusterName')]"
            }
        },
        {
            "apiVersion": "[variables('storageApiVersion')]",
            "type": "Microsoft.Storage/storageAccounts",
            "name": "[variables('applicationDiagnosticsStorageAccountName')]",
            "location": "[variables('computeLocation')]",
            "dependsOn": [],
            "properties": {},
              "kind": "[parameters('storageAccountKind')]",
            "sku": {
                "name": "[parameters('storageAccountType')]"
            },
            "tags": {
                "resourceType": "Service Fabric",
                "clusterName": "[parameters('clusterName')]"
            }
        },
        {
            "apiVersion": "[variables('publicIPApiVersion')]",
            "type": "Microsoft.Network/publicIPAddresses",
            "name": "[concat(variables('dnsName'),copyIndex())]",
            "location": "[variables('computeLocation')]",
            "sku":{"name": "Standard"},
            "copy": {
                "name": "pipLoop",
                "count": "[parameters('loopCount')]"
            },
            "properties": {
                "dnsSettings": {
                    "domainNameLabel": "[concat(variables('dnsName'),copyIndex())]"
                },
                "publicIPAllocationMethod": "Static"
            },
            "tags": {
                "resourceType": "Service Fabric",
                "clusterName": "[parameters('clusterName')]"
            }
        },
        {
            "apiVersion": "[variables('lbApiVersion')]",
            "type": "Microsoft.Network/loadBalancers",
            "name": "[concat('LB','-', parameters('clusterName'),'-',variables('vmNodeType0Name'),copyIndex())]",
            "location": "[variables('computeLocation')]",
            "sku":{"name": "Standard"},
            "copy": {
                "name": "vmssLoop",
                "count": "[parameters('loopCount')]"
            },
            
            "dependsOn": [
                "[concat('Microsoft.Network/publicIPAddresses/',concat(variables('dnsName'),copyIndex()))]"
            ],
            "properties": {
                "frontendIPConfigurations": [{
                    "name": "LoadBalancerIPConfig",
                    "properties": "[variables('publicIPAddress')[copyIndex('vmssLoop',0)]]"
                }],
                "backendAddressPools": [{
                    "name": "LoadBalancerBEAddressPool",
                    "properties": {}
                }],
                "loadBalancingRules": [
                    {
                    "name": "LBRule",
                    "properties": {
                        "backendAddressPool": {
                            "id": "[concat(resourceId('Microsoft.Network/loadBalancers',concat('LB','-', parameters('clusterName'),'-',variables('vmNodeType0Name'),copyIndex())),'/backendAddressPools/LoadBalancerBEAddressPool')]"
                        },
                        "backendPort": "[variables('nt0fabricTcpGatewayPort')]",
                        "enableFloatingIP": false,
                        "frontendIPConfiguration": {
                            "id": "[concat(resourceId('Microsoft.Network/loadBalancers',concat('LB','-', parameters('clusterName'),'-',variables('vmNodeType0Name'),copyIndex())),'/frontendIPConfigurations/LoadBalancerIPConfig')]"
                        },
                        "frontendPort": "[variables('nt0fabricTcpGatewayPort')]",
                        "idleTimeoutInMinutes": 5,
                        "probe": {
                            "id": "[concat(resourceId('Microsoft.Network/loadBalancers',concat('LB','-', parameters('clusterName'),'-',variables('vmNodeType0Name'),copyIndex())),'/probes/FabricGatewayProbe')]"
                        },
                        "protocol": "Tcp"
                    }
                },
                {
                    "name": "LBHttpRule",
                    "properties": {
                        "backendAddressPool": {
                            "id": "[concat(resourceId('Microsoft.Network/loadBalancers',concat('LB','-', parameters('clusterName'),'-',variables('vmNodeType0Name'),copyIndex())),'/backendAddressPools/LoadBalancerBEAddressPool')]"
                        },
                        "backendPort": "[variables('nt0fabricHttpGatewayPort')]",
                        "enableFloatingIP": false,
                        "frontendIPConfiguration": {
                            "id": "[concat(resourceId('Microsoft.Network/loadBalancers',concat('LB','-', parameters('clusterName'),'-',variables('vmNodeType0Name'),copyIndex())),'/frontendIPConfigurations/LoadBalancerIPConfig')]"
                        },
                        "frontendPort": "[variables('nt0fabricHttpGatewayPort')]",
                        "idleTimeoutInMinutes": 5,

                        "probe": {
                            "id": "[concat(resourceId('Microsoft.Network/loadBalancers',concat('LB','-', parameters('clusterName'),'-',variables('vmNodeType0Name'),copyIndex())),'/probes/FabricHttpGatewayProbe')]"
                        },
                        "protocol": "Tcp"
                    }
                },
                {
                    "name": "LogstashRule",
                    "properties": {
                        "backendAddressPool": {
                            "id": "[concat(resourceId('Microsoft.Network/loadBalancers',concat('LB','-', parameters('clusterName'),'-',variables('vmNodeType0Name'),copyIndex())),'/backendAddressPools/LoadBalancerBEAddressPool')]"
                        },
                        "backendPort": 5044,
                        "enableFloatingIP": false,
                        "frontendIPConfiguration": {
                            "id": "[concat(resourceId('Microsoft.Network/loadBalancers',concat('LB','-', parameters('clusterName'),'-',variables('vmNodeType0Name'),copyIndex())),'/frontendIPConfigurations/LoadBalancerIPConfig')]"
                        },
                        "frontendPort": 5044,
                        "idleTimeoutInMinutes": 5,
                        "probe": {
                            "id": "[concat(resourceId('Microsoft.Network/loadBalancers',concat('LB','-', parameters('clusterName'),'-',variables('vmNodeType0Name'),copyIndex())),'/probes/LogstashProbe')]"
                        },
                        "protocol": "Tcp"
                    }
                },
                {
                    "name": "KibanaRule",
                    "properties": {
                        "backendAddressPool": {
                            "id": "[concat(resourceId('Microsoft.Network/loadBalancers',concat('LB','-', parameters('clusterName'),'-',variables('vmNodeType0Name'),copyIndex())),'/backendAddressPools/LoadBalancerBEAddressPool')]"
                        },
                        "backendPort": 5601,
                        "enableFloatingIP": false,
                        "frontendIPConfiguration": {
                            "id": "[concat(resourceId('Microsoft.Network/loadBalancers',concat('LB','-', parameters('clusterName'),'-',variables('vmNodeType0Name'),copyIndex())),'/frontendIPConfigurations/LoadBalancerIPConfig')]"
                        },
                        "frontendPort": 5601,
                        "idleTimeoutInMinutes": 5,
                        "probe": {
                            "id": "[concat(resourceId('Microsoft.Network/loadBalancers',concat('LB','-', parameters('clusterName'),'-',variables('vmNodeType0Name'),copyIndex())),'/probes/KibanaProbe')]"
                        },
                        "protocol": "Tcp"
                    }
                },
                {
                    "name": "ElasticSearchRule1",
                    "properties": {
                        "backendAddressPool": {
                            "id": "[concat(resourceId('Microsoft.Network/loadBalancers',concat('LB','-', parameters('clusterName'),'-',variables('vmNodeType0Name'),copyIndex())),'/backendAddressPools/LoadBalancerBEAddressPool')]"
                        },
                        "backendPort": 9300,
                        "enableFloatingIP": false,
                        "frontendIPConfiguration": {
                            "id": "[concat(resourceId('Microsoft.Network/loadBalancers',concat('LB','-', parameters('clusterName'),'-',variables('vmNodeType0Name'),copyIndex())),'/frontendIPConfigurations/LoadBalancerIPConfig')]"
                        },
                        "frontendPort": 9300,
                        "idleTimeoutInMinutes": 5,
                        "probe": {
                            "id": "[concat(resourceId('Microsoft.Network/loadBalancers',concat('LB','-', parameters('clusterName'),'-',variables('vmNodeType0Name'),copyIndex())),'/probes/ElasticSearchProbe')]"
                        },
                        "protocol": "Tcp"
                    }
                },
                {
                    "name": "ElasticSearchRule2",
                    "properties": {
                        "backendAddressPool": {
                            "id": "[concat(resourceId('Microsoft.Network/loadBalancers',concat('LB','-', parameters('clusterName'),'-',variables('vmNodeType0Name'),copyIndex())),'/backendAddressPools/LoadBalancerBEAddressPool')]"
                        },
                        "backendPort": 9200,
                        "enableFloatingIP": false,
                        "frontendIPConfiguration": {
                            "id": "[concat(resourceId('Microsoft.Network/loadBalancers',concat('LB','-', parameters('clusterName'),'-',variables('vmNodeType0Name'),copyIndex())),'/frontendIPConfigurations/LoadBalancerIPConfig')]"
                        },
                        "frontendPort": 9200,
                        "idleTimeoutInMinutes": 5,
                        "probe": {
                            "id": "[concat(resourceId('Microsoft.Network/loadBalancers',concat('LB','-', parameters('clusterName'),'-',variables('vmNodeType0Name'),copyIndex())),'/probes/ElasticSearchProbe')]"
                        },
                        "protocol": "Tcp"
                    }
                },
                {
                    "name": "NginxRule",
                    "properties": {
                        "backendAddressPool": {
                            "id": "[concat(resourceId('Microsoft.Network/loadBalancers',concat('LB','-', parameters('clusterName'),'-',variables('vmNodeType0Name'),copyIndex())),'/backendAddressPools/LoadBalancerBEAddressPool')]"
                        },
                        "backendPort": 80,
                        "enableFloatingIP": false,
                        "frontendIPConfiguration": {
                            "id": "[concat(resourceId('Microsoft.Network/loadBalancers',concat('LB','-', parameters('clusterName'),'-',variables('vmNodeType0Name'),copyIndex())),'/frontendIPConfigurations/LoadBalancerIPConfig')]"
                        },
                        "frontendPort": 80,
                        "idleTimeoutInMinutes": 5,
                        "probe": {
                            "id": "[concat(resourceId('Microsoft.Network/loadBalancers',concat('LB','-', parameters('clusterName'),'-',variables('vmNodeType0Name'),copyIndex())),'/probes/NginxProbe')]"
                        },
                        "protocol": "Tcp"
                    }
                }
            ],
                "probes": [{
                        "name": "FabricGatewayProbe",
                        "properties": {
                            "intervalInSeconds": 5,
                            "numberOfProbes": 2,
                            "port": "[variables('nt0fabricTcpGatewayPort')]",
                            "protocol": "Tcp"
                        }
                    },
                    {
                        "name": "FabricHttpGatewayProbe",
                        "properties": {
                            "intervalInSeconds": 5,
                            "numberOfProbes": 2,
                            "port": "[variables('nt0fabricHttpGatewayPort')]",
                            "protocol": "Tcp"
                        }
                    },
                    
                    
                    {
                        "name": "LogstashProbe",
                        "properties": {
                            "intervalInSeconds": 5,
                            "numberOfProbes": 2,
                            "port": 5044,
                            "protocol": "Tcp"
                        }
                    },
                    {
                        "name": "KibanaProbe",
                        "properties": {
                            "intervalInSeconds": 5,
                            "numberOfProbes": 2,
                            "port": 5601,
                            "protocol": "Tcp"
                        }
                    },
                    {
                        "name": "ElasticSearchProbe",
                        "properties": {
                            "intervalInSeconds": 5,
                            "numberOfProbes": 2,
                            "port": 9300,
                            "protocol": "Tcp"
                        }
                    },
                    {
                        "name": "NginxProbe",
                        "properties": {
                            "intervalInSeconds": 5,
                            "numberOfProbes": 2,
                            "port": 80,
                            "protocol": "Tcp"
                        }
                    }
                    
                ],
                "inboundNatPools": [{
                    "name": "LoadBalancerBEAddressNatPool",
                    "properties": {
                        "backendPort": 22,
                        "frontendIPConfiguration": {
                            "id": "[concat(resourceId('Microsoft.Network/loadBalancers',concat('LB','-', parameters('clusterName'),'-',variables('vmNodeType0Name'),copyIndex())),'/frontendIPConfigurations/LoadBalancerIPConfig')]"
                        },
                        "frontendPortRangeEnd": 50010,
                        "frontendPortRangeStart": 50000,
                        "protocol": "Tcp"
                    }
                }]
            },
            "tags": {
                "resourceType": "Service Fabric",
                "clusterName": "[parameters('clusterName')]"
            }
        },
        {
            "apiVersion": "[variables('vmssApiVersion')]",
            "type": "Microsoft.Compute/virtualMachineScaleSets",
            "name": "[concat(variables('vmNodeType0Name'),copyIndex())]",
            "location": "[variables('computeLocation')]",
            "copy": {
                "name": "vmssLoop",
                "count": "[parameters('loopCount')]"
              },
            "dependsOn": [
                "[concat('Microsoft.Network/loadBalancers/', concat('LB','-', parameters('clusterName'),'-',variables('vmNodeType0Name'),copyIndex()))]",
                "[concat('Microsoft.Storage/storageAccounts/', variables('supportLogStorageAccountName'))]",
                "[concat('Microsoft.Storage/storageAccounts/', variables('applicationDiagnosticsStorageAccountName'))]"
            ],
            "properties": {
                "overprovision": "[variables('overProvision')]",
                "upgradePolicy": {
                    "mode": "Automatic"
                },
                "virtualMachineProfile": {
                    "extensionProfile": {
                        "extensions": [{
                                "name": "[concat('ServiceFabricNodeVmExt','_vmNodeType0Name',copyIndex())]",
                                "properties": {
                                    "type": "ServiceFabricLinuxNode",
                                    "autoUpgradeMinorVersion": true,
                                    "enableAutomaticUpgrade": true,
                                    "protectedSettings": {
                                        "StorageAccountKey1": "[listKeys(resourceId('Microsoft.Storage/storageAccounts', variables('supportLogStorageAccountName')),'2015-05-01-preview').key1]",
                                        "StorageAccountKey2": "[listKeys(resourceId('Microsoft.Storage/storageAccounts', variables('supportLogStorageAccountName')),'2015-05-01-preview').key2]"
                                    },
                                    "publisher": "Microsoft.Azure.ServiceFabric",
                                    "settings": {
                                        "clusterEndpoint": "[reference(parameters('clusterName')).clusterEndpoint]",
                                        "nodeTypeRef": "[concat(variables('vmNodeType0Name'),copyIndex())]",
                                        "durabilityLevel": "Silver",
                                        "enableParallelJobs": true,
                                        "certificate": {
                                            "thumbprint": "[parameters('certificateThumbprint')]",
                                            "x509StoreName": "[parameters('certificateStoreValue')]"
                                        }
                                    },
                                    "typeHandlerVersion": "2.0"
                                }
                            },
                            {
                                "name": "[concat('VMDiagnosticsVmExt','_vmNodeType0Name',copyIndex())]",
                                "properties": {
                                    "type": "LinuxDiagnostic",
                                    "autoUpgradeMinorVersion": true,
                                    "protectedSettings": {
                                        "storageAccountName": "[variables('applicationDiagnosticsStorageAccountName')]",
                                        "storageAccountEndPoint": "https://core.windows.net/",
                                        "storageAccountKey": "[listKeys(resourceId('Microsoft.Storage/storageAccounts', variables('applicationDiagnosticsStorageAccountName')),'2015-05-01-preview').key1]"
                                       
                                    },
                                    "publisher": "Microsoft.Azure.Diagnostics",
                                    "settings": {
                                        "StorageAccount": "[variables('applicationDiagnosticsStorageAccountName')]",
                                            "ladCfg": {
                                            "sampleRateInSeconds": 15,
                                            "diagnosticMonitorConfiguration": {
                                                "eventVolume": "Medium",
                                                "metrics": {
                                                    "metricAggregation": [
                                                        {
                                                            "scheduledTransferPeriod": "PT1H"
                                                        },
                                                        {
                                                            "scheduledTransferPeriod": "PT1M"
                                                        }
                                                    ],
                                                    "resourceId": "\"[concat(variables('ladmetricsresourceid1'),'_vmNodeType0Name',copyIndex()]\""
                                                },
                                                "performanceCounters": {
                                                    "sinks": "[variables('logEventHubSink')]",
                                                    "performanceCounterConfiguration": []
                                                },
                                                "syslogEvents": {
                                                    "sinks": "[variables('logEventHubSink')]",
                                                    "syslogEventConfiguration": {
                                                        "LOG_AUTH": "LOG_DEBUG",
                                                        "LOG_AUTHPRIV": "LOG_DEBUG",
                                                        "LOG_CRON": "LOG_DEBUG",
                                                        "LOG_DAEMON": "LOG_DEBUG",
                                                        "LOG_FTP": "LOG_DEBUG",
                                                        "LOG_KERN": "LOG_DEBUG",
                                                        "LOG_LOCAL0": "LOG_DEBUG",
                                                        "LOG_LOCAL1": "LOG_DEBUG",
                                                        "LOG_LOCAL2": "LOG_DEBUG",
                                                        "LOG_LOCAL3": "LOG_DEBUG",
                                                        "LOG_LOCAL4": "LOG_DEBUG",
                                                        "LOG_LOCAL5": "LOG_DEBUG",
                                                        "LOG_LOCAL6": "LOG_DEBUG",
                                                        "LOG_LOCAL7": "LOG_DEBUG",
                                                        "LOG_LPR": "LOG_DEBUG",
                                                        "LOG_MAIL": "LOG_DEBUG",
                                                        "LOG_NEWS": "LOG_DEBUG",
                                                        "LOG_SYSLOG": "LOG_DEBUG",
                                                        "LOG_USER": "LOG_DEBUG",
                                                        "LOG_UUCP": "LOG_DEBUG"
                                                    }
                                                }
                                            }
                                        },
                                        "perfCfg": [
                                        ],
                                         "fileLogs": [
                                        {
                                            "file": "/tmp/mysfapp0.0.log",
                                            "table": "EchoServiceLogs",
                                            "sinks": "[variables('logEventHubSink')]"
                                        }
                                        ],
                                        "eventVolume": "Small",
                                        "sampleRateInSeconds": 60
                                    },
                                    "typeHandlerVersion": "3.0"
                                }
                            }
                            
                        ]
                    },
                    "networkProfile": {
                        "networkInterfaceConfigurations": [{
                            "name": "[concat(variables('nicName'),copyIndex(),'-0')]",
                            "properties": {
                                "ipConfigurations": [
                                    {
                                    "name": "[concat(variables('nicName'),copyIndex(),'-',0)]",
                                    "properties": {
                                        "loadBalancerBackendAddressPools": [{
                                            "id": "[concat(resourceId('Microsoft.Network/loadBalancers',concat('LB','-', parameters('clusterName'),'-',variables('vmNodeType0Name'),copyIndex())),'/backendAddressPools/LoadBalancerBEAddressPool')]"
                                        }],
                                        "loadBalancerInboundNatPools": [{
                                            "id": "[concat(resourceId('Microsoft.Network/loadBalancers',concat('LB','-', parameters('clusterName'),'-',variables('vmNodeType0Name'),copyIndex())),'/inboundNatPools/LoadBalancerBEAddressNatPool')]"
                                        }],
                                        "subnet": {
                                            "id": "[resourceId(parameters('vnetResourceGroup'),'Microsoft.Network/virtualNetworks/subnets', parameters('vnetName'), parameters('subnetNames')[copyIndex()])]"
                                        },
                                        "primary": "true"
                                    }
                                }                              
              
                            ],
                                "primary": true
                            }
                        }]
                    },
                    "osProfile": {
                        "adminPassword": "[parameters('adminPassword')]",
                        "adminUsername": "[parameters('adminUsername')]",
                        "computernamePrefix": "[concat(variables('vmNodeType0Name'),copyIndex())]",
                        "secrets": [{
                            "sourceVault": {
                                "id": "[parameters('sourceVaultValue')]"
                            },
                            "vaultCertificates": [{
                                "certificateUrl": "[parameters('certificateUrlValue')]"
                            }]
                        }]
                    },
                    "storageProfile": {
                        "imageReference": {
                            "publisher": "[parameters('vmImagePublisher')]",
                            "offer": "[parameters('vmImageOffer')]",
                            "sku": "[parameters('vmImageSku')]",
                            "version": "[parameters('vmImageVersion')]"
                        },
                        "osDisk": {
                            "caching": "ReadOnly",
                            "createOption": "FromImage",
                            "managedDisk": {
                                "storageAccountType": "[parameters('storageAccountType')]"
                            }
                        }
                    }
                }
            },
            "sku": {
                "name": "[parameters('vmNodeTypeSize')[copyIndex()]]",
                "capacity": "[parameters('nt0InstanceCount')]",
                "tier": "Standard"
            },
            "tags": {
                "resourceType": "Service Fabric",
                "clusterName": "[parameters('clusterName')]"
            }
        },
        {
            "apiVersion": "[variables('sfrpApiVersion')]",
            "type": "Microsoft.ServiceFabric/clusters",
            "name": "[parameters('clusterName')]",
            "location": "[parameters('clusterLocation')]",
            "dependsOn": [
                "[concat('Microsoft.Storage/storageAccounts/', variables('supportLogStorageAccountName'))]"
            ],
            "properties": {
                "addonFeatures": [
                    "DnsService",
                    "RepairManager",
                    "ResourceMonitorService"
                ],
                "certificate": {
                    "thumbprint": "[parameters('certificateThumbprint')]",
                    "x509StoreName": "[parameters('certificateStoreValue')]"
                },
                "clientCertificateThumbprints": [
                    {
                        "isAdmin": true,
                        "certificateThumbprint": "[parameters('clientCertificateStoreValue')]"
                    }
                  ],
                "clusterState": "Default",
                "diagnosticsStorageAccountConfig": {
                    "blobEndpoint": "[reference(concat('Microsoft.Storage/storageAccounts/', variables('supportLogStorageAccountName')), variables('storageApiVersion')).primaryEndpoints.blob]",
                    "protectedAccountKeyName": "StorageAccountKey1",
                    "queueEndpoint": "[reference(concat('Microsoft.Storage/storageAccounts/', variables('supportLogStorageAccountName')), variables('storageApiVersion')).primaryEndpoints.queue]",
                    "storageAccountName": "[variables('supportLogStorageAccountName')]",
                    "tableEndpoint": "[reference(concat('Microsoft.Storage/storageAccounts/', variables('supportLogStorageAccountName')), variables('storageApiVersion')).primaryEndpoints.table]"
                },
                "fabricSettings": [{
                    "parameters": [
                        {
                            "name": "ClusterProtectionLevel",
                            "value": "[parameters('clusterProtectionLevel')]"
                        },
                        {
                            "name": "EnforceLinuxMinTlsVersion",
                            "value": true
                        },
                        {
                            "name": "TLS1_2_CipherList",
                            "value": "ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-RSA-AES-128-GCM-SHA256:ECDHE-ECDSA-AES256-CBC-SHA384:ECDHE-ECDSA-AES128-CBC-SHA256:ECDHE-RSA-AES256-CBC-SHA384:ECDHE-RSA-AES128-CBC-SHA256"
                        }
                    ],
                    "name": "Security"
                },
                {
                    "name": "DnsService",
                    "parameters": [
                       {
                            "name": "IsEnabled",
                            "value": "true"
                      }
                    ]
                },
                {
                    "name": "Hosting",
                    "parameters": [
                      { 
                            "name": "IPProviderEnabled",
                            "value": "true"
                      }
                    ]
                },
                {
                    "name": "Setup",
                    "parameters": [
                      { 
                            "name": "ContainerNetworkSetup",
                            "value": "true"
                      }
                    ]
                }
                ],
                "managementEndpoint": "[concat('https://',reference(concat(variables('dnsName'),'0')).dnsSettings.fqdn,':',variables('nt0fabricHttpGatewayPort'))]",
                "copy": [
                {
                        "name":"nodeTypes",
                        "count": "[parameters('loopCount')]",
                        "input":{
                            "name": "[concat(variables('vmNodeType0Name'),copyIndex('nodeTypes',0))]",
                           
                            "placementProperties": "[variables('ntProperties')[copyIndex('nodeTypes',0)]]",

                            "applicationPorts": {
                                "endPort": "[variables('nt0applicationEndPort')]",
                                "startPort": "[variables('nt0applicationStartPort')]"
                            },
                            "clientConnectionEndpointPort": "[variables('nt0fabricTcpGatewayPort')]",
                            "durabilityLevel": "Bronze",
                            "ephemeralPorts": {
                                "endPort": "[variables('nt0ephemeralEndPort')]",
                                "startPort": "[variables('nt0ephemeralStartPort')]"
                            },
                            "httpGatewayEndpointPort": "[variables('nt0fabricHttpGatewayPort')]",
                            "isPrimary": "[json(if(equals(copyIndex('nodeTypes',0),0),'true','false'))]",
                            "vmInstanceCount": "[parameters('nt0InstanceCount')]"
                        }

                    }
                ],
                "provisioningState": "Default",
                "reliabilityLevel": "Bronze",
                "upgradeMode": "Automatic",
                "vmImage": "Linux"
            },
            "tags": {
                "resourceType": "Service Fabric",
                "clusterName": "[parameters('clusterName')]"
            }
        },
        {
            "type": "Microsoft.Network/networkSecurityGroups",
            "name": "[parameters('slbNSGName')]",
            "location": "[resourceGroup().location]",
            "apiVersion": "2018-03-01",
            "properties": {
            "securityRules": [
                {
                "name": "AllowInternet",
                "properties": {
                        "protocol": "*",
                        "sourcePortRange": "*",
                        "destinationPortRange": "*",
                        "sourceAddressPrefix": "Internet",
                        "destinationAddressPrefix": "*",
                        "access": "Allow",
                        "priority": 100,
                        "direction": "Inbound",
                        "sourcePortRanges": [],
                        "destinationPortRanges": [],
                        "sourceAddressPrefixes": [],
                        "destinationAddressPrefixes": []
                        }
                    }
                ]
            }
        }
        
        
    ],
    "outputs": {
        
    }
}
